name: Deployment to PROD

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Grant permissions to push tags to the repository

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Install Utilities
        run: |
          pip install yq
          xq --version

      - name: Create Server Key File
        run: |
          openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K "${{ secrets.DECRYPTION_KEY }}" -iv "${{ secrets.DECRYPTION_IV }}"
          
      - name: Install Salesforce CLI
        run: sudo npm install @salesforce/cli --global

      - name: Install SGD Plugin
        run: echo y | sf plugins install "sfdx-git-delta"

  delta:
    name: Generate Delta Package
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Delta
        id: check_changes
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --list "PROD/*" --sort=-v:refname | head -n 1)
          echo "Using $LATEST_TAG"
          
          echo "----Generating SFDX-Delta Folder----"
          mkdir -p Sfdx-Delta
          
          MODIFIED_FILES=$(git diff --name-only "$LATEST_TAG" HEAD)
          if [ -z "$MODIFIED_FILES" ]; then
              echo "No modified files found between $LATEST_TAG and HEAD."
              echo "has_changes=false" >> $GITHUB_ENV
          else
              echo "has_changes=true" >> $GITHUB_ENV
          fi

          sf sgd source delta --from $LATEST_TAG --output Sfdx-Delta/ --generate-delta
          
          echo "--- package.xml generated with added and modified metadata ---"
          cat Sfdx-Delta/package/package.xml

      - name: Set Output
        run: echo "::set-output name=has_changes::${{ env.has_changes }}"

  deploy:
    name: Deploy to Salesforce
    runs-on: ubuntu-latest
    needs: delta
    if: needs.delta.outputs.has_changes == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Salesforce
        run: |
          echo "---Checking for Pre-DestructiveChanges----"
          if [ -d Sfdx-Delta/scripts/destructiveChanges/pre ]; then
            echo "---Starting with Pre-destructive Changes-----"
            sf project deploy start --post-destructive-changes Sfdx-Delta/scripts/destructiveChanges/pre/destructiveChanges.xml --manifest Sfdx-Delta/scripts/destructiveChanges/pre/destructiveChanges.xml -o ${{ secrets.SF_CICD_USERNAME }}
          fi

          echo "---Deploying Changes---"
          TEST_LEVEL="RunSpecifiedTests"
          if [ $TEST_LEVEL = "RunSpecifiedTests" ]; then
            export APEX_CLASSES=$(xq . < SpecifiedTest.xml | jq '.Package.types | [.] | flatten | map(select(.name=="ApexClass")) | .[] | .members | [.] | flatten | map(select(. | index("*") | not)) | unique | join(" ")' -r)
            sf project deploy start --source-dir Sfdx-Delta/force-app -w 30 -l RunSpecifiedTests -o ${{ secrets.SF_CICD_USERNAME }} --tests $APEX_CLASSES
          elif [ $TEST_LEVEL = "RunLocalTests" ]; then
            sf project deploy start --source-dir Sfdx-Delta/force-app -w 30 -l RunLocalTests -o ${{ secrets.SF_CICD_USERNAME }}
          else
            sf project deploy start --source-dir Sfdx-Delta/force-app -w 30 -l NoTestRun -o ${{ secrets.SF_CICD_USERNAME }}
          fi

          sf project deploy report --use-most-recent -o ${{ secrets.SF_CICD_USERNAME }} --wait 120

          echo "---Handling Post-DestructiveChanges---"
          if [ -d Sfdx-Delta/scripts/destructiveChanges/post ]; then
            sf project deploy start --post-destructive-changes Sfdx-Delta/scripts/destructiveChanges/post/destructiveChanges.xml --manifest Sfdx-Delta/scripts/destructiveChanges/post/destructiveChanges.xml -o ${{ secrets.SF_CICD_USERNAME }}
          fi

  tag:
    name: Tag and Push
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.delta.outputs.has_changes == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create and Push Tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --list "PROD/*" --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            TAG_NAME="PROD/1"
          else
            TAG_NUMBER=${LATEST_TAG#PROD/}
            TAG_NAME="PROD/$((TAG_NUMBER + 1))"
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG_NAME" -m "Deployed to PROD"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} "$TAG_NAME"
